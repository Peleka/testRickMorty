{"version":3,"sources":["App.module.scss","Components/Card.module.scss","Components/Header.module.scss","DAL/api.ts","BLL/reducer.ts","Components/Header.tsx","Components/Card.tsx","Components/Main.tsx","App.tsx","reportWebVitals.ts","BLL/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","characterAPI","page","status","name","get","SET_CARDS","SET_CURRENT_PAGE","SET_TOTAL_CHARACTER_PAGE","SET_STATUS_FILTER","initialState","data","pageSize","currentPage","totalCharacterCount","setCardsAC","cards","type","setCurrentPageAC","setTotalCharacterCountAC","getCardsTC","dispatch","getState","state","then","res","info","count","results","catch","alert","Header","useState","currentInputValue","setCurrentInputValue","useEffect","useDispatch","className","s","header","container","title","onChange","event","target","value","onBlur","onKeyPress","e","key","input","placeholder","autoFocus","Card","props","card","image","species","gender","location","src","alt","style","cursor","alive","dead","unknown","setStyleStatus","Main","useSelector","pagesCount","Math","ceil","filteredStatus","setFilteredStatus","flex_wrapper","map","st","onClick","button","toUpperCase","Pagination","variant","boundaryCount","defaultPage","p","blockCards","charactersCards","item","id","App","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb9178f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__39Y9q\",\"container\":\"App_container__YVERc\",\"flex_wrapper\":\"App_flex_wrapper__GolBm\",\"blockCards\":\"App_blockCards__3uXQT\",\"charactersCards\":\"App_charactersCards__1ruhh\",\"button\":\"App_button__1GXh9\",\"selected\":\"App_selected__3bIHW\",\"main\":\"App_main__qIuWv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3CXAx\",\"image\":\"Card_image__2CK2w\",\"name\":\"Card_name__WkXzL\",\"status\":\"Card_status__3meri\",\"alive\":\"Card_alive__2nh72\",\"dead\":\"Card_dead__3CaIi\",\"unknown\":\"Card_unknown__NQE8a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__jkIDt\",\"container\":\"Header_container__50prQ\",\"title\":\"Header_title__P71nG\",\"input\":\"Header_input__wCXzI\"};","import axios from \"axios\"\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://rickandmortyapi.com/api\"\r\n})\r\n\r\nexport const characterAPI = {\r\n    getCharacters(page: number, status: string, name: string ) {\r\n        return instance.get(`/character/?page=${page}&status=${status}&name=${name}`)\r\n    },\r\n    // getEpisode() {\r\n    //     return instance.get(`/episode`)\r\n    // }\r\n}","import {characterAPI} from \"../DAL/api\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nconst SET_CARDS = \"CARDS/SET_CARDS\"\r\nconst SET_CURRENT_PAGE = \"CARDS/SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_CHARACTER_PAGE = \"CARDS/SET_TOTAL_CHARACTER_PAGE\"\r\nconst SET_STATUS_FILTER = \"CARDS/SET_STATUS_FILTER\"\r\n\r\nconst initialState = {\r\n    data: [] as Array<CardDataType>,\r\n    pageSize: 20,\r\n    currentPage: 1,\r\n    totalCharacterCount: 0,\r\n    status: \"\"\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsActionType) => {\r\n    switch (action.type) {\r\n        case SET_CARDS:\r\n            return {...state, data: action.cards}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_CHARACTER_PAGE:\r\n            return {...state, totalCharacterCount: action.totalCharacterCount}\r\n        case SET_STATUS_FILTER:\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionCreators\r\nexport const setCardsAC = (cards: any) => ({type: SET_CARDS, cards} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalCharacterCountAC = (totalCharacterCount: number) => ({\r\n    type: SET_TOTAL_CHARACTER_PAGE,\r\n    totalCharacterCount\r\n} as const)\r\nexport const setFilteredStatus = (status: string) => ({\r\n    type: SET_STATUS_FILTER,\r\n    status\r\n} as const)\r\n\r\n//type\r\nexport type CardsActionType =\r\n    ReturnType<typeof setCardsAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalCharacterCountAC>\r\n    | ReturnType<typeof setFilteredStatus>\r\n\r\n//thunk\r\nexport const getCardsTC = (name: string = \"\"): AppThunkType => (dispatch, getState) => {\r\n    const state = getState()\r\n    const page = state.cards.currentPage\r\n    const status = state.cards.status\r\n\r\n    characterAPI.getCharacters(page, status, name)\r\n        .then(res => {\r\n            dispatch(setTotalCharacterCountAC(res.data.info.count))\r\n            dispatch(setCardsAC(res.data.results))\r\n        })\r\n        .catch(() => alert(\"Error console\"))\r\n}\r\n\r\n//types\r\nexport type CardDataType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    species?: string\r\n    type?: string\r\n    gender?: string\r\n    origin?: {\r\n        name?: string\r\n        url?: string\r\n    }\r\n    image?: string\r\n    episode?: []\r\n    url?: string\r\n    created?: string\r\n}\r\ntype Info = {\r\n    count: number\r\n    pages: number\r\n    next: string | null\r\n    prev: string | null\r\n}\r\nexport type CharactersType = {\r\n    info: Info\r\n    results: Array<CardDataType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\nimport s from './Header.module.scss'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getCardsTC} from \"../BLL/reducer\";\r\n\r\nexport const Header = () => {\r\n    const [currentInputValue, setCurrentInputValue] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC())\r\n    }, [])\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentInputValue(event.target.value)\r\n    }\r\n\r\n    const onKeyPressInputHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === \"Enter\") {\r\n            dispatch(getCardsTC(currentInputValue))\r\n        }\r\n    }\r\n\r\n    const filterName = () => {\r\n        dispatch(getCardsTC(currentInputValue))\r\n    }\r\n\r\n\r\n// @ts-ignore\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.container}>\r\n                <div>\r\n                    <h1 className={s.title}>RICK & MORTY</h1>\r\n                    <p>Hero database </p>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        onChange={onChangeInputHandler}\r\n                        onBlur={filterName}\r\n                        onKeyPress={onKeyPressInputHandler}\r\n                        value={currentInputValue}\r\n                        className={s.input}\r\n                        type=\"text\"\r\n                        placeholder=\"Поиск по имени\"\r\n                        autoFocus={true}\r\n                    />\r\n                    {/*{/\\D/.test(currentInputValue) ? <span>Введите число</span> : \"\"}*/}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Card.module.scss'\r\n\r\nexport const Card = (props: any) => {\r\n    const {card} = props\r\n    const {image, name, species, gender, location, status} = card\r\n\r\n    const setStyleStatus = (status: string) => {\r\n        switch (status) {\r\n            case 'Alive' : {\r\n                return s.alive\r\n            }\r\n            case 'Dead': {\r\n                return s.dead\r\n            }\r\n            default:\r\n                return s.unknown\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.card}>\r\n            <img src={image} className={s.image} alt=\"avatar\"/>\r\n            <div>\r\n                <div style={{cursor: \"pointer\"}}>\r\n                    <p className={s.name}>{name}</p>\r\n                    <span className={setStyleStatus(status)}>{status}</span>\r\n                </div>\r\n                <div>\r\n                    <h3>Категория: {species}</h3>\r\n                    <h3>Пол: {gender}</h3>\r\n                    <h3>Местоположение: {location.name}</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from '../App.module.scss';\r\nimport {Card} from \"./Card\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../BLL/store\";\r\nimport {Pagination} from \"@mui/material\";\r\nimport {getCardsTC, setCurrentPageAC, setFilteredStatus} from \"../BLL/reducer\";\r\n\r\nexport const Main = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const data = useSelector((state: AppStoreType) => state.cards.data)\r\n    const currentPage = useSelector((state: AppStoreType) => state.cards.currentPage)\r\n    const pageSize = useSelector((state: AppStoreType) => state.cards.pageSize)\r\n    const totalCharacterCount = useSelector((state: AppStoreType) => state.cards.totalCharacterCount)\r\n    const status = [\"alive\", \"dead\", \"unknown\"]\r\n\r\n    //pagination\r\n    let pagesCount = Math.ceil(totalCharacterCount / pageSize)\r\n\r\n    const onChangeCurrentPage = (page: number) => {\r\n        dispatch(setCurrentPageAC(page))\r\n        dispatch(getCardsTC())\r\n    }\r\n\r\n    const filteredStatus = (status: string) => {\r\n        dispatch(setCurrentPageAC(1))\r\n        dispatch(setFilteredStatus(status))\r\n        dispatch(getCardsTC())\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.flex_wrapper}>\r\n                <div>\r\n                    {status.map(st => {\r\n                        return (\r\n                            <button\r\n                                onClick={(e) => filteredStatus(st)}\r\n                                className={s.button}\r\n                            >{st.toUpperCase()}</button>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    <Pagination\r\n                        count={pagesCount}     //The total number of pages.\r\n                        variant=\"outlined\"\r\n                        page={currentPage}  //The current page.\r\n                        boundaryCount={1}   //Number of always visible pages at the beginning and end.\r\n                        defaultPage={1}\r\n                        onChange={(e: ChangeEvent<any>, p: number) => onChangeCurrentPage(p)} //event: The event source of the callback.\r\n                        //page: The page selected.\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={s.blockCards}>\r\n                <h2>В базе Вселенной удалось найти: </h2>\r\n                {data\r\n                    ? <div className={s.charactersCards}>\r\n                        {\r\n                            //@ts-ignore\r\n                            data.map((item) => (<Card\r\n                                card={item}\r\n                                key={item.id}\r\n                            />))}\r\n                    </div>\r\n                    : <div>\r\n                        <p>В базе пока нет эпизода под таким номером</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport s from \"./App.module.scss\"\nimport {Header} from \"./Components/Header\";\nimport {Main} from \"./Components/Main\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n        <div className={s.main}>\n            <Main/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CardsActionType, cardsReducer} from \"./reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    cards: cardsReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//types\r\nexport type AppThunkType<ReturnType= void> = ThunkAction<ReturnType, AppStoreType, unknown, AppActions>\r\nexport type AppActions = CardsActionType\r\nexport type AppStoreType = ReturnType<typeof rootReducer>\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from './BLL/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}